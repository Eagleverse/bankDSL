6/22

import string

#######################################
# CONSTANTS
#######################################

DIGITS = '0123456789'
LETTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'


#######################################
# ERRORS
#######################################

class Error:
    def __init__(self, pos_start, pos_end, error_name, details):
        self.pos_start = pos_start
        self.pos_end = pos_end
        self.error_name = error_name
        self.details = details

    def as_string(self):
        result = f'{self.error_name}: {self.details}\n'
        result += f'File {self.pos_start.fn}, line {self.pos_start.ln + 1}'
        return result


class IllegalCharError(Error):
    def __init__(self, pos_start, pos_end, details):
        super().__init__(pos_start, pos_end, 'Illegal Character', details)


#######################################
# POSITION
#######################################

class Position:
    def __init__(self, idx, ln, col, fn, ftxt):
        self.idx = idx
        self.ln = ln
        self.col = col
        self.fn = fn
        self.ftxt = ftxt

    def advance(self, current_char=None):
        self.idx += 1
        self.col += 1

        if current_char == '\n':
            self.ln += 1
            self.col = 0

        return self

    def copy(self):
        return Position(self.idx, self.ln, self.col, self.fn, self.ftxt)


#######################################
# TOKENS
#######################################

TT_INT = 'INT'
TT_FLOAT = 'FLOAT'
TT_STRING = 'STRING'
TT_COMMA = 'COMMA'
TT_PLUS = 'PLUS'
TT_MINUS = 'MINUS'
TT_DIV = 'DIV'
TT_MULT = 'MULT'
TT_LPAREN = 'LPAREN'
TT_RPAREN = 'RPAREN'


class Token:
    def __init__(self, type_, value=None, pos_start=None, pos_end=None):
        self.type = type_
        self.value = value

        if pos_start:
            self.pos_start = pos_start.copy()
            self.pos_end = pos_start.copy()
            self.pos_end.advance()

        if pos_end:
            self.pos_end = pos_end.copy()

    def __repr__(self):
        if self.value:
            return f'{self.type}:{self.value}'
        return f'{self.type}'


#######################################
# LEXER
#######################################

class Lexer:
    def __init__(self, fn, text):
        self.fn = fn
        self.text = text
        self.pos = Position(-1, 0, -1, fn, text)
        self.current_char = None
        self.advance()

    def advance(self):
        self.pos.advance(self.current_char)
        self.current_char = self.text[self.pos.idx] if self.pos.idx < len(self.text) else None

    def make_tokens(self):
        tokens = []

        while self.current_char is not None:
            if self.current_char in ' \t':
                self.advance()
            elif self.current_char in DIGITS:
                tokens.append(self.make_number())
            elif self.current_char == '"':
                tokens.append(self.make_string())
            elif self.current_char == ',':
                tokens.append(Token(TT_COMMA, pos_start=self.pos))
                self.advance()
            elif self.current_char == '+':
                tokens.append(Token(TT_PLUS, pos_start=self.pos))
                self.advance()
            elif self.current_char == '-':
                tokens.append(Token(TT_MINUS, pos_start=self.pos))
                self.advance()
            elif self.current_char == '/':
                tokens.append(Token(TT_DIV, pos_start=self.pos))
                self.advance()
            elif self.current_char == '*':
                tokens.append(Token(TT_MULT, pos_start=self.pos))
                self.advance()
            elif self.current_char == '(':
                tokens.append(Token(TT_LPAREN, pos_start=self.pos))
                self.advance()
            elif self.current_char == ')':
                tokens.append(Token(TT_RPAREN, pos_start=self.pos))
                self.advance()
            else:
                pos_start = self.pos.copy()
                char = self.current_char
                self.advance()
                return [], IllegalCharError(pos_start, self.pos, "'" + char + "'")

        return tokens, None

    def make_number(self):
        num_str = ''
        dot_count = 0
        pos_start = self.pos.copy()

        while self.current_char is not None and self.current_char in DIGITS + '.':
            if self.current_char == '.':
                if dot_count == 1:
                    break
                dot_count += 1
                num_str += '.'
            else:
                num_str += self.current_char
            self.advance()

        if dot_count == 0:
            return Token(TT_INT, int(num_str), pos_start, self.pos)
        else:
            return Token(TT_FLOAT, float(num_str), pos_start, self.pos)

    def make_string(self):
        string = ''
        pos_start = self.pos.copy()
        self.advance()

        while self.current_char is not None and (self.current_char != '"'):
            string += self.current_char
            self.advance()

        return Token(TT_STRING, str(string), pos_start, self.pos)


#######################################
# RUN
#######################################
def run(fn, text):
    lexer = Lexer(fn, text)
    tokens, error = lexer.make_tokens()

    return tokens, error


6/20/24

import random
from apparatus.lexer import Lexer
###################################
#####     MAIN :)             #####
###################################

EST = print

#######################################
# RUN
#######################################


# Generate AST
# parser_ = Parser(tokens)
#   ast = parser_.parse()
#  if ast.error: return None, ast.error


class BankAccount:
    def __init__(self, firstname, lastname, initialbal):
        self.firstName = firstname
        self.lastName = lastname
        self.balance = initialbal
        self.id = Octogram()

    def get_name(self):
        return f"{self.lastName}, {self.firstName}"

    def get_account_number(self):
        return self.id

    def get_balance(self):
        return str(self.balance)

    def deposit(self, deposit_):
        self.balance += deposit_

    def withdraw(self, withdraw_):
        # Hypothetical withdrawal.
        hyposbalance = self.balance
        hyposbalance2 = hyposbalance - withdraw_
        if hyposbalance2 >= 0:
            self.balance -= withdraw_
        else:
            print(f"Overdraw error. Cannot take {withdraw_} from {self.balance}.")


def Octogram():
    rand_list = ""
    for i in range(0, 7):
        n = random.randint(0, 9)
        rand_list += str(n)
    return rand_list


class BankSys:
    def __init__(self):
        self.accounts = [
            BankAccount("Chris", "Ennis", 1000),
            BankAccount("James", "Vo", 2500),
            BankAccount("Keagan", "Haar", 750),
            BankAccount("Clark", "Kent", 950),
            BankAccount("Bruce", "Wayne", 7500000),
        ]

    def account_dump(self):
        return self.accounts

    def get_account_by_id(self, account_id):
        for i in self.accounts:
            if i.get_account_number() == account_id:
                return i

    def create_account(self, first_name, last_name, balance):
        self.accounts.append(BankAccount(first_name, last_name, balance))
        print("Account created!")


def main():
    print("Accounts:")
    bank = BankSys()
    for account in bank.account_dump():
        print(f"{account.get_name()}-{account.get_account_number()}")

    if input("Create new account? (yes/no): ").lower() == "yes":
        first_name = input("First name: ")
        last_name = input("Last name: ")
        balance = float(input("Initial deposit: "))
        bank.create_account(first_name, last_name, balance)
        print("Accounts:")
        for account in bank.account_dump():
            print(f"{account.get_name()}-{account.get_account_number()}")

    selected_account = None
    while not selected_account:
        account_id = input("Enter account ID: ")
        selected_account = bank.get_account_by_id(account_id)
        if not selected_account:
            print("Invalid ID. Try again.")

    running = True
    while running:
        print(
            "Selected: "
            + selected_account.get_name()
            + " - "
            + str(selected_account.get_account_number())
        )
        print("1. Deposit")
        print("2. Withdraw")
        print("3. Balance")
        print("4. Different account")
        print("5. Exit")

        choice = input("Choice: ")

        if choice == "1":
            amount = float(input("Deposit: "))
            selected_account.deposit(amount)
        elif choice == "2":
            amount = float(input("Withdraw: "))
            selected_account.withdraw(amount)
        elif choice == "3":
            print(f"Balance: ${selected_account.get_balance()}")
        elif choice == "4":
            selected_account = None
            for account in bank.account_dump():
                print(f"{account.get_name()}-{account.get_account_number()}")
            while not selected_account:
                account_id = input("Enter account ID: ")
                selected_account = bank.get_account_by_id(account_id)
                if not selected_account:
                    print("Invalid ID. Try again.")
        elif choice == "5" or choice.lower() == "exit":
            running = False
        else:
            print("Invalid choice. Try again.")


print("Thank you for using VEH Bank")


def run(fn, text):
    lexer = Lexer(fn, text)
    tokens, error = lexer.make_tokens()

    return tokens, error


if __name__ == "__main__":
    main()

    def mane():
    text = ""
    while text.strip() != "exit()":
        text = input('BankS > ')
        if text.strip() == "":
            continue
        if text.strip() == "exit":
            break
        else:
            text = text.upper()
        result = run(text)
        print(result.kind)

